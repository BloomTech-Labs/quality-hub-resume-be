module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateIndustry {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Industry {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type IndustryConnection {
  pageInfo: PageInfo!
  edges: [IndustryEdge]!
  aggregate: AggregateIndustry!
}

input IndustryCreateInput {
  id: ID
  name: String!
  posts: PostCreateManyWithoutIndustryInput
}

input IndustryCreateOneWithoutPostsInput {
  create: IndustryCreateWithoutPostsInput
  connect: IndustryWhereUniqueInput
}

input IndustryCreateWithoutPostsInput {
  id: ID
  name: String!
}

type IndustryEdge {
  node: Industry!
  cursor: String!
}

enum IndustryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type IndustryPreviousValues {
  id: ID!
  name: String!
}

type IndustrySubscriptionPayload {
  mutation: MutationType!
  node: Industry
  updatedFields: [String!]
  previousValues: IndustryPreviousValues
}

input IndustrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndustryWhereInput
  AND: [IndustrySubscriptionWhereInput!]
  OR: [IndustrySubscriptionWhereInput!]
  NOT: [IndustrySubscriptionWhereInput!]
}

input IndustryUpdateInput {
  name: String
  posts: PostUpdateManyWithoutIndustryInput
}

input IndustryUpdateManyMutationInput {
  name: String
}

input IndustryUpdateOneWithoutPostsInput {
  create: IndustryCreateWithoutPostsInput
  update: IndustryUpdateWithoutPostsDataInput
  upsert: IndustryUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: IndustryWhereUniqueInput
}

input IndustryUpdateWithoutPostsDataInput {
  name: String
}

input IndustryUpsertWithoutPostsInput {
  update: IndustryUpdateWithoutPostsDataInput!
  create: IndustryCreateWithoutPostsInput!
}

input IndustryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [IndustryWhereInput!]
  OR: [IndustryWhereInput!]
  NOT: [IndustryWhereInput!]
}

input IndustryWhereUniqueInput {
  id: ID
}

type Job {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  isPending: Boolean!
  isAccepted: Boolean!
  isDenied: Boolean!
  isComplete: Boolean!
  dateRequested: DateTime!
  dateAccepted: DateTime!
  dateCompleted: DateTime!
}

type JobConnection {
  pageInfo: PageInfo!
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  id: ID
  name: String!
  posts: PostCreateManyInput
  isPending: Boolean!
  isAccepted: Boolean!
  isDenied: Boolean!
  isComplete: Boolean!
  dateRequested: DateTime!
  dateAccepted: DateTime!
  dateCompleted: DateTime!
}

type JobEdge {
  node: Job!
  cursor: String!
}

enum JobOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  isPending_ASC
  isPending_DESC
  isAccepted_ASC
  isAccepted_DESC
  isDenied_ASC
  isDenied_DESC
  isComplete_ASC
  isComplete_DESC
  dateRequested_ASC
  dateRequested_DESC
  dateAccepted_ASC
  dateAccepted_DESC
  dateCompleted_ASC
  dateCompleted_DESC
}

type JobPreviousValues {
  id: ID!
  name: String!
  isPending: Boolean!
  isAccepted: Boolean!
  isDenied: Boolean!
  isComplete: Boolean!
  dateRequested: DateTime!
  dateAccepted: DateTime!
  dateCompleted: DateTime!
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobWhereInput
  AND: [JobSubscriptionWhereInput!]
  OR: [JobSubscriptionWhereInput!]
  NOT: [JobSubscriptionWhereInput!]
}

input JobUpdateInput {
  name: String
  posts: PostUpdateManyInput
  isPending: Boolean
  isAccepted: Boolean
  isDenied: Boolean
  isComplete: Boolean
  dateRequested: DateTime
  dateAccepted: DateTime
  dateCompleted: DateTime
}

input JobUpdateManyMutationInput {
  name: String
  isPending: Boolean
  isAccepted: Boolean
  isDenied: Boolean
  isComplete: Boolean
  dateRequested: DateTime
  dateAccepted: DateTime
  dateCompleted: DateTime
}

input JobWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  isPending: Boolean
  isPending_not: Boolean
  isAccepted: Boolean
  isAccepted_not: Boolean
  isDenied: Boolean
  isDenied_not: Boolean
  isComplete: Boolean
  isComplete_not: Boolean
  dateRequested: DateTime
  dateRequested_not: DateTime
  dateRequested_in: [DateTime!]
  dateRequested_not_in: [DateTime!]
  dateRequested_lt: DateTime
  dateRequested_lte: DateTime
  dateRequested_gt: DateTime
  dateRequested_gte: DateTime
  dateAccepted: DateTime
  dateAccepted_not: DateTime
  dateAccepted_in: [DateTime!]
  dateAccepted_not_in: [DateTime!]
  dateAccepted_lt: DateTime
  dateAccepted_lte: DateTime
  dateAccepted_gt: DateTime
  dateAccepted_gte: DateTime
  dateCompleted: DateTime
  dateCompleted_not: DateTime
  dateCompleted_in: [DateTime!]
  dateCompleted_not_in: [DateTime!]
  dateCompleted_lt: DateTime
  dateCompleted_lte: DateTime
  dateCompleted_gt: DateTime
  dateCompleted_gte: DateTime
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

input JobWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createIndustry(data: IndustryCreateInput!): Industry!
  updateIndustry(data: IndustryUpdateInput!, where: IndustryWhereUniqueInput!): Industry
  updateManyIndustries(data: IndustryUpdateManyMutationInput!, where: IndustryWhereInput): BatchPayload!
  upsertIndustry(where: IndustryWhereUniqueInput!, create: IndustryCreateInput!, update: IndustryUpdateInput!): Industry!
  deleteIndustry(where: IndustryWhereUniqueInput!): Industry
  deleteManyIndustries(where: IndustryWhereInput): BatchPayload!
  createJob(data: JobCreateInput!): Job!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job
  updateManyJobs(data: JobUpdateManyMutationInput!, where: JobWhereInput): BatchPayload!
  upsertJob(where: JobWhereUniqueInput!, create: JobCreateInput!, update: JobUpdateInput!): Job!
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  price: Int
  position: String
  industry: Industry
  description: String!
  reviewerID: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  company: String
  isPublished: Boolean!
  position_lc: String
  desc_lc: String
  company_lc: String
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  ratingId: ID!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  price: Int
  position: String
  industry: IndustryCreateOneWithoutPostsInput
  description: String!
  reviewerID: String!
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  tags: TagCreateManyWithoutPostsInput
  ratingId: ID!
}

input PostCreateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutIndustryInput {
  create: [PostCreateWithoutIndustryInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutTagsInput {
  create: [PostCreateWithoutTagsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutIndustryInput {
  id: ID
  price: Int
  position: String
  description: String!
  reviewerID: String!
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  tags: TagCreateManyWithoutPostsInput
  ratingId: ID!
}

input PostCreateWithoutTagsInput {
  id: ID
  price: Int
  position: String
  industry: IndustryCreateOneWithoutPostsInput
  description: String!
  reviewerID: String!
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  ratingId: ID!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  position_ASC
  position_DESC
  description_ASC
  description_DESC
  reviewerID_ASC
  reviewerID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  company_ASC
  company_DESC
  isPublished_ASC
  isPublished_DESC
  position_lc_ASC
  position_lc_DESC
  desc_lc_ASC
  desc_lc_DESC
  company_lc_ASC
  company_lc_DESC
  ratingId_ASC
  ratingId_DESC
}

type PostPreviousValues {
  id: ID!
  price: Int
  position: String
  description: String!
  reviewerID: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  company: String
  isPublished: Boolean!
  position_lc: String
  desc_lc: String
  company_lc: String
  ratingId: ID!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  reviewerID: String
  reviewerID_not: String
  reviewerID_in: [String!]
  reviewerID_not_in: [String!]
  reviewerID_lt: String
  reviewerID_lte: String
  reviewerID_gt: String
  reviewerID_gte: String
  reviewerID_contains: String
  reviewerID_not_contains: String
  reviewerID_starts_with: String
  reviewerID_not_starts_with: String
  reviewerID_ends_with: String
  reviewerID_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  company: String
  company_not: String
  company_in: [String!]
  company_not_in: [String!]
  company_lt: String
  company_lte: String
  company_gt: String
  company_gte: String
  company_contains: String
  company_not_contains: String
  company_starts_with: String
  company_not_starts_with: String
  company_ends_with: String
  company_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  position_lc: String
  position_lc_not: String
  position_lc_in: [String!]
  position_lc_not_in: [String!]
  position_lc_lt: String
  position_lc_lte: String
  position_lc_gt: String
  position_lc_gte: String
  position_lc_contains: String
  position_lc_not_contains: String
  position_lc_starts_with: String
  position_lc_not_starts_with: String
  position_lc_ends_with: String
  position_lc_not_ends_with: String
  desc_lc: String
  desc_lc_not: String
  desc_lc_in: [String!]
  desc_lc_not_in: [String!]
  desc_lc_lt: String
  desc_lc_lte: String
  desc_lc_gt: String
  desc_lc_gte: String
  desc_lc_contains: String
  desc_lc_not_contains: String
  desc_lc_starts_with: String
  desc_lc_not_starts_with: String
  desc_lc_ends_with: String
  desc_lc_not_ends_with: String
  company_lc: String
  company_lc_not: String
  company_lc_in: [String!]
  company_lc_not_in: [String!]
  company_lc_lt: String
  company_lc_lte: String
  company_lc_gt: String
  company_lc_gte: String
  company_lc_contains: String
  company_lc_not_contains: String
  company_lc_starts_with: String
  company_lc_not_starts_with: String
  company_lc_ends_with: String
  company_lc_not_ends_with: String
  ratingId: ID
  ratingId_not: ID
  ratingId_in: [ID!]
  ratingId_not_in: [ID!]
  ratingId_lt: ID
  ratingId_lte: ID
  ratingId_gt: ID
  ratingId_gte: ID
  ratingId_contains: ID
  ratingId_not_contains: ID
  ratingId_starts_with: ID
  ratingId_not_starts_with: ID
  ratingId_ends_with: ID
  ratingId_not_ends_with: ID
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateDataInput {
  price: Int
  position: String
  industry: IndustryUpdateOneWithoutPostsInput
  description: String
  reviewerID: String
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  tags: TagUpdateManyWithoutPostsInput
  ratingId: ID
}

input PostUpdateInput {
  price: Int
  position: String
  industry: IndustryUpdateOneWithoutPostsInput
  description: String
  reviewerID: String
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  tags: TagUpdateManyWithoutPostsInput
  ratingId: ID
}

input PostUpdateManyDataInput {
  price: Int
  position: String
  description: String
  reviewerID: String
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  ratingId: ID
}

input PostUpdateManyInput {
  create: [PostCreateInput!]
  update: [PostUpdateWithWhereUniqueNestedInput!]
  upsert: [PostUpsertWithWhereUniqueNestedInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyMutationInput {
  price: Int
  position: String
  description: String
  reviewerID: String
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  ratingId: ID
}

input PostUpdateManyWithoutIndustryInput {
  create: [PostCreateWithoutIndustryInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutIndustryInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutIndustryInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutTagsInput {
  create: [PostCreateWithoutTagsInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutIndustryDataInput {
  price: Int
  position: String
  description: String
  reviewerID: String
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  tags: TagUpdateManyWithoutPostsInput
  ratingId: ID
}

input PostUpdateWithoutTagsDataInput {
  price: Int
  position: String
  industry: IndustryUpdateOneWithoutPostsInput
  description: String
  reviewerID: String
  company: String
  isPublished: Boolean
  position_lc: String
  desc_lc: String
  company_lc: String
  ratingId: ID
}

input PostUpdateWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  data: PostUpdateDataInput!
}

input PostUpdateWithWhereUniqueWithoutIndustryInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutIndustryDataInput!
}

input PostUpdateWithWhereUniqueWithoutTagsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutTagsDataInput!
}

input PostUpsertWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  update: PostUpdateDataInput!
  create: PostCreateInput!
}

input PostUpsertWithWhereUniqueWithoutIndustryInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutIndustryDataInput!
  create: PostCreateWithoutIndustryInput!
}

input PostUpsertWithWhereUniqueWithoutTagsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutTagsDataInput!
  create: PostCreateWithoutTagsInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  industry: IndustryWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  reviewerID: String
  reviewerID_not: String
  reviewerID_in: [String!]
  reviewerID_not_in: [String!]
  reviewerID_lt: String
  reviewerID_lte: String
  reviewerID_gt: String
  reviewerID_gte: String
  reviewerID_contains: String
  reviewerID_not_contains: String
  reviewerID_starts_with: String
  reviewerID_not_starts_with: String
  reviewerID_ends_with: String
  reviewerID_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  company: String
  company_not: String
  company_in: [String!]
  company_not_in: [String!]
  company_lt: String
  company_lte: String
  company_gt: String
  company_gte: String
  company_contains: String
  company_not_contains: String
  company_starts_with: String
  company_not_starts_with: String
  company_ends_with: String
  company_not_ends_with: String
  isPublished: Boolean
  isPublished_not: Boolean
  position_lc: String
  position_lc_not: String
  position_lc_in: [String!]
  position_lc_not_in: [String!]
  position_lc_lt: String
  position_lc_lte: String
  position_lc_gt: String
  position_lc_gte: String
  position_lc_contains: String
  position_lc_not_contains: String
  position_lc_starts_with: String
  position_lc_not_starts_with: String
  position_lc_ends_with: String
  position_lc_not_ends_with: String
  desc_lc: String
  desc_lc_not: String
  desc_lc_in: [String!]
  desc_lc_not_in: [String!]
  desc_lc_lt: String
  desc_lc_lte: String
  desc_lc_gt: String
  desc_lc_gte: String
  desc_lc_contains: String
  desc_lc_not_contains: String
  desc_lc_starts_with: String
  desc_lc_not_starts_with: String
  desc_lc_ends_with: String
  desc_lc_not_ends_with: String
  company_lc: String
  company_lc_not: String
  company_lc_in: [String!]
  company_lc_not_in: [String!]
  company_lc_lt: String
  company_lc_lte: String
  company_lc_gt: String
  company_lc_gte: String
  company_lc_contains: String
  company_lc_not_contains: String
  company_lc_starts_with: String
  company_lc_not_starts_with: String
  company_lc_ends_with: String
  company_lc_not_ends_with: String
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  ratingId: ID
  ratingId_not: ID
  ratingId_in: [ID!]
  ratingId_not_in: [ID!]
  ratingId_lt: ID
  ratingId_lte: ID
  ratingId_gt: ID
  ratingId_gte: ID
  ratingId_contains: ID
  ratingId_not_contains: ID
  ratingId_starts_with: ID
  ratingId_not_starts_with: ID
  ratingId_ends_with: ID
  ratingId_not_ends_with: ID
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
  reviewerID: String
}

type Query {
  industry(where: IndustryWhereUniqueInput!): Industry
  industries(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry]!
  industriesConnection(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndustryConnection!
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  node(id: ID!): Node
}

type Subscription {
  industry(where: IndustrySubscriptionWhereInput): IndustrySubscriptionPayload
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  posts: PostCreateManyWithoutTagsInput
}

input TagCreateManyWithoutPostsInput {
  create: [TagCreateWithoutPostsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutPostsInput {
  id: ID
  name: String!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  name: String
  posts: PostUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithoutPostsInput {
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutPostsDataInput {
  name: String
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutPostsDataInput!
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutPostsDataInput!
  create: TagCreateWithoutPostsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
}
`
      }
    